use crate::dns::types::base::{DnsTypeNum, RawDomain};
use crate::dns::types::parts::{Request, Response};
use std::rc::Rc;
use crate::query;

pub fn test_encode_into() {
    let mut buf = [0_u8; 1500];
    for _ in 0..20000 {
        let arr = Request::new(
            Rc::new(RawDomain::from_str("www.baidu.com").unwrap()),
            DnsTypeNum::A,
        )
        .encode_to_udp(&mut buf);
        assert_eq!(arr.len(), 31);
    }
}

pub fn test_decode_from() {
    let arr = &[
        0xb9_u8, 0xde, 0x80, 0x80, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77,
        0x77, 0x77, 0x05, 0x62, 0x61, 0x69, 0x64, 0x75, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01,
        0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x0f, 0x03,
        0x77, 0x77, 0x77, 0x01, 0x61, 0x06, 0x73, 0x68, 0x69, 0x66, 0x65, 0x6e, 0xc0, 0x16, 0xc0,
        0x2b, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x04, 0xb7, 0x02, 0xac, 0xb9,
        0xc0, 0x2b, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x04, 0xb7, 0x02, 0xac,
        0x2a,
    ][..];
    for _ in 0..20000 {
        let response = Response::from_slice_uncheck(arr).unwrap();
        response.into_answers().iter().for_each(|_a| {})
    }
}

pub fn test_query() {
    let t = query! {
        a,
        all,
        @target "www.baidu.com".to_string(),
        @server vec!["9.9.9.9".to_string()]
    };
}