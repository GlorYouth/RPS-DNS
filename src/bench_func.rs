use crate::{DnsType, Request, Response};

pub fn test_encode_into() {
    let mut buf = [0_u8; 1500];
    for _ in 0..20000 {
        let arr = Request::new("www.google.com".to_string(), DnsType::A.into())
            .encode_to_udp(&mut buf)
            .unwrap();
        assert_eq!(arr.len(), 32);
    }
}

pub fn test_decode_from() {
    let arr = &[
        0xb9, 0xde, 0x80, 0x80, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77,
        0x77, 0x05, 0x62, 0x61, 0x69, 0x64, 0x75, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00,
        0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x0f, 0x03, 0x77,
        0x77, 0x77, 0x01, 0x61, 0x06, 0x73, 0x68, 0x69, 0x66, 0x65, 0x6e, 0xc0, 0x16, 0xc0, 0x2b,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x04, 0xb7, 0x02, 0xac, 0xb9, 0xc0,
        0x2b, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x04, 0xb7, 0x02, 0xac, 0x2a,
    ];
    for _ in 0..20000 {
        let response = Response::from_slice(arr).unwrap();
        assert_eq!(response.header.id, 0xb9de);
    }
}
